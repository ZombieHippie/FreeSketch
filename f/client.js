// Generated by CoffeeScript 1.9.1
var $, Connection, Game, InputSlider, Listeners, Pencil, Toolbar, addPencil, appendSent, changePencil, checkUsername, client_id, closeInput, colorOutOfDate, connection, ctx, delay, drawSData, gameStarted, getConnection, getCookie, getId, getPencil, getUsername, gm, inputOpen, makeID, messageData, openInput, openNotice, pencilBox, pickupAPencil, putdownAPencil, refreshCanvas, removeCanvasSaver, removePencil, saveCanvas, sendAndClear, serverMessage, setCookie, setUsername, sizeOutOfDate, startGame, tools, uname, updateColor, updateLumInput, updateSize, userConnection;

$ = Zepto;

connection = 0;

ctx = 0;

gm = null;

tools = null;

gameStarted = false;

inputOpen = false;

sizeOutOfDate = false;

colorOutOfDate = false;

client_id = null;

uname = "";

$(function() {
  var wsUri, wss;
  wsUri = "ws://192.168.0.2:236/";
  console.log("Creating new Socket at: " + wsUri);
  wss = new window.WebSocket(wsUri);
  return connection = new Connection(wss);
});

getConnection = function() {
  return connection;
};

getUsername = function() {
  return uname;
};

getId = function() {
  if (client_id === null) {
    client_id = makeID();
  }
  return client_id;
};

refreshCanvas = function() {
  return gm.run();
};

saveCanvas = function() {
  var canvas, img;
  canvas = document.getElementById("sketchpad");
  img = canvas.toDataURL("image/png");
  removeCanvasSaver();
  return $('body').append('<div id="save-canvas" class="span8" onclick="closeInput();"><img src="' + img + '"/><h4>Right click to save</h4></div>');
};

removeCanvasSaver = function() {
  return $('#save-canvas').remove();
};

makeID = function() {
  var possible, text;
  text = "";
  possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  text += possible.charAt(Math.floor(Math.random() * possible.length));
  text += possible.charAt(Math.floor(Math.random() * possible.length));
  text += possible.charAt(Math.floor(Math.random() * possible.length));
  return text;
};

startGame = function() {
  var canvas, game, listeners;
  canvas = document.createElement("canvas");
  game = new Game(canvas);
  canvas.height = game.viewHeight;
  canvas.width = game.viewWidth;
  canvas.id = "sketchpad";
  $('.g').text('');
  $('.g').append(canvas);
  game.run();
  listeners = new Listeners(game);
  gm = game;
  tools = new Toolbar(gm);
  return gameStarted = true;
};

delay = function(ms, func) {
  return setTimeout(func, ms);
};

updateColor = function() {
  tools.changeColor(tools.colorInput.getValue() / 100, 1, tools.lumInput.getValue() / 100);
  return colorOutOfDate = false;
};

updateLumInput = function() {
  return tools.updateLumInput();
};

updateSize = function() {
  tools.changeSize(Math.floor(tools.sizeInput.getValue() / 100 * 12));
  return sizeOutOfDate = false;
};

openNotice = function(evt) {
  if (!inputOpen) {
    openInput();
    inputOpen = true;
    if (evt.keyCode === 32) {
      $('#inputBox').val('');
    }
  }
  if (evt.keyCode === 13) {
    sendAndClear();
    return closeInput();
  }
};

openInput = function() {
  $('#largeInput').attr('style', 'visibility: visible;');
  $('#lightBox').attr('style', 'visibility: visible;');
  return $('#inputBox').focus();
};

closeInput = function() {
  $('#largeInput').attr('style', 'visibility: hidden;');
  $('#lightBox').attr('style', 'visibility: hidden;');
  removeCanvasSaver();
  if (colorOutOfDate) {
    updateColor();
  }
  if (sizeOutOfDate) {
    updateSize();
  }
  $('#inputBox').val('');
  return inputOpen = false;
};

sendAndClear = function() {
  if ($('#inputBox').val() !== '') {
    connection.sendMessage(getUsername(), $('#inputBox').val());
    appendSent($('#inputBox').val());
    return $('#inputBox').val('');
  }
};

Pencil = (function() {
  Pencil.prototype.lastX = 0;

  Pencil.prototype.lastY = 0;

  Pencil.prototype.size = 1;

  Pencil.prototype.color = '#000';

  Pencil.prototype.drawing = false;

  function Pencil(cid1) {
    this.cid = cid1;
  }

  return Pencil;

})();

pencilBox = [];

addPencil = function(cid) {
  pencilBox.push(new Pencil(cid));
  gm.newCursor(cid);
  return getPencil(cid);
};

removePencil = function(cid) {
  gm.removeCursor(cid);
  return delete getPencil(cid);
};

getPencil = function(cid) {
  var i, len, pencil;
  for (i = 0, len = pencilBox.length; i < len; i++) {
    pencil = pencilBox[i];
    if (pencil.cid === cid) {
      return pencil;
    }
  }
  return addPencil(cid);
};

drawSData = function(d) {
  var cid, pencil, x2, y2;
  if (!gameStarted) {
    return;
  }
  cid = d[0];
  pencil = getPencil(cid);
  if (pencil === null || typeof pencil === 'undefined') {
    return;
  }
  x2 = d[1];
  y2 = d[2];
  gm.drawCursor(cid, x2, y2);
  if (pencil.drawing) {
    gm.drawIn(pencil.size, pencil.color, pencil.lastX, pencil.lastY, x2, y2);
  }
  pencil.lastX = x2;
  return pencil.lastY = y2;
};

pickupAPencil = function(cid) {
  return getPencil(cid).drawing = false;
};

putdownAPencil = function(cid) {
  return getPencil(cid).drawing = true;
};

changePencil = function(d) {
  var cid, newcolor, newsize, pencil;
  cid = d[1];
  newsize = d[2];
  newcolor = d[3];
  pencil = getPencil(cid);
  pencil.size = newsize;
  return pencil.color = newcolor;
};

serverMessage = function(d) {
  return $('#messagelog').prepend('<li class="msg"><span style="color:#f3f">Server: </span>' + d[1].replace('`', ':') + '</li>');
};

userConnection = function(d) {
  $('#messagelog').prepend('<li class="msg"><span style="color:#4f4">Artist Joined: </span>' + d[1] + '</li>');
  return addPencil(d[2]);
};

messageData = function(d) {
  return $('#messagelog').prepend('<li class="msg selectable"><span style="color:#f33">' + d[1] + ': </span>' + d[2].replace('`', ':') + '</li>');
};

appendSent = function(m) {
  return $('#messagelog').prepend('<li class="msg selectable"><span style="color:#33f">' + getUsername() + ': </span>' + m + '</li>');
};

getCookie = function(cookieKey) {
  var cookie, cookieKV, i, len, pageCookies;
  pageCookies = document.cookie.split(";");
  for (i = 0, len = pageCookies.length; i < len; i++) {
    cookie = pageCookies[i];
    cookieKV = cookie.split("=");
    console.log(cookieKV);
    if (cookieKV[0] === cookieKey) {
      return unescape(cookieKV[1]);
    }
  }
  return null;
};

setCookie = function(cookieKey, cookieValue, exdays) {
  var c_value, exdate;
  exdate = new Date();
  exdate.setDate(exdate.getDate() + exdays);
  c_value = escape(cookieValue) + (exdays === null ? "" : "; expires=" + exdate.toUTCString());
  return document.cookie = cookieKey + "=" + c_value;
};

checkUsername = function() {
  var username;
  username = getCookie("username");
  if (username === null || username === "") {
    username = prompt("Please enter your name:", "");
    alert('You can press any key to open the chat menu and change your pencils!');
    if (username !== null && username !== "") {
      setCookie("username", username, 21);
    }
  }
  return uname = username;
};

setUsername = function() {
  var username;
  username = prompt("Please enter your name:", "");
  if (username !== null && username !== "") {
    setCookie("username", username, 21);
    return uname = username;
  }
};

Game = (function() {
  Game.prototype.viewWidth = 840;

  Game.prototype.viewHeight = 640;

  Game.prototype.positionX = 0;

  Game.prototype.positionY = 0;

  Game.prototype.pencilOutOfDate = false;

  Game.prototype.uSize = 1;

  Game.prototype.uColor = "#000";

  Game.prototype.x1 = 0;

  Game.prototype.y1 = 0;

  function Game(canvas1) {
    this.canvas = canvas1;
    this.ctx = this.canvas.getContext("2d");
    this.ctx.lineWidth = 1;
    this.ctx.strokeStyle = "#000";
    this.ctx.lineCap = 'round';
  }

  Game.prototype.run = function() {
    this.ctx.fillStyle = "#f2f2f2";
    this.ctx.fillRect(0, 0, this.viewWidth, this.viewHeight);
    return this.ctx.lineCap = 'round';
  };

  Game.prototype.position = function() {
    if (this.canvas && !isNaN(this.canvas.offsetLeft) && !isNaN(this.canvas.offsetTop)) {
      this.positionX = this.canvas.offsetLeft - window.scrollX;
      return this.positionY = this.canvas.offsetTop - window.scrollY;
    }
  };

  Game.prototype.pickupPencil = function() {
    this.x1 = 0;
    this.y1 = 0;
    return getConnection().sendPickup();
  };

  Game.prototype.drawCursor = function(cid, x, y) {
    return $('#' + cid).attr('style', 'top: ' + y + 'px; left: ' + x + 'px;');
  };

  Game.prototype.newCursor = function(cid) {
    if ($('#' + cid).get().length !== 0) {
      console.log("Pencil cursor REPEATED CID ERROR");
    } else {
      return $('#cursors').append('<div id="' + cid + '" class="curs" style="top: 0px;left: 0px;"></div>');
    }
  };

  Game.prototype.removeCursor = function(cid) {
    console.log("Cursor with CID:" + cid + " removed");
    return $('#' + cid).remove();
  };

  Game.prototype.draw = function(x2, y2) {
    var aX, aY, bX, bY;
    aX = this.x1;
    aY = this.y1;
    bX = Math.floor(x2);
    bY = Math.floor(y2);
    this.x1 = bX;
    this.y1 = bY;
    this.ctx.lineWidth = this.uSize;
    this.ctx.strokeStyle = this.uColor;
    this.drawStep2(aX, aY, bX, bY);
    if (this.pencilOutOfDate) {
      getConnection().sendPencil(this.uSize, this.uColor);
    }
    return getConnection().sendDraw(bX, bY);
  };

  Game.prototype.cmove = function(x2, y2) {
    var bX, bY;
    bX = Math.floor(x2);
    bY = Math.floor(y2);
    return getConnection().sendDraw(bX, bY);
  };

  Game.prototype.drawIn = function(bSize, bColor, aX, aY, bX, bY) {
    this.ctx.lineWidth = bSize;
    this.ctx.strokeStyle = bColor;
    return this.drawStep2(aX, aY, bX, bY);
  };

  Game.prototype.drawStep2 = function(aX, aY, bX, bY) {
    if (aX === 0 && aY === 0) {
      return getConnection().sendPutdown();
    }
    this.ctx.beginPath();
    this.ctx.moveTo(aX, aY);
    this.ctx.lineTo(bX, bY);
    return this.ctx.stroke();
  };

  return Game;

})();

Listeners = (function() {
  Listeners.prototype.drawing = false;

  function Listeners(game1) {
    this.game = game1;
    this.game.position();
    window.addEventListener('resize', (function(_this) {
      return function() {
        return _this.game.position();
      };
    })(this));
    window.addEventListener('scroll', (function(_this) {
      return function() {
        return _this.game.position();
      };
    })(this));
    this.game.canvas.addEventListener('mouseup', (function(_this) {
      return function() {
        return _this.pickupPencil();
      };
    })(this));
    this.game.canvas.addEventListener('mousedown', (function(_this) {
      return function() {
        return _this.drawing = true;
      };
    })(this));
    this.game.canvas.addEventListener('mouseout', (function(_this) {
      return function() {
        return _this.pickupPencil();
      };
    })(this));
    this.game.canvas.addEventListener('mousemove', (function(_this) {
      return function(e) {
        var x, y;
        x = e.clientX - _this.game.positionX;
        y = e.clientY - _this.game.positionY;
        if (!_this.drawing) {
          return _this.game.cmove(x, y);
        } else {
          return _this.game.draw(x, y);
        }
      };
    })(this));
  }

  Listeners.prototype.pickupPencil = function() {
    this.drawing = false;
    return this.game.pickupPencil();
  };

  return Listeners;

})();

Connection = (function() {
  function Connection(wss1) {
    this.wss = wss1;
    console.log("Connection initialized.");
    this.wss.onopen = function() {
      console.log("Connection opened, starting game.");
      startGame();
      return getConnection().Send("u:" + checkUsername() + ":" + getId());
    };
    this.wss.onmessage = function(evt) {
      return getConnection().Receive(evt);
    };
  }

  Connection.prototype.Receive = function(msg) {
    var dA;
    dA = msg.data.split(":");
    if (dA[0] === 'b') {
      return changePencil(dA);
    }
    if (dA[0] === 'p') {
      return pickupAPencil(dA[1]);
    }
    if (dA[0] === 'd') {
      return putdownAPencil(dA[1]);
    }
    if (dA[0] === 'm') {
      return messageData(dA);
    }
    if (dA[0] === 's') {
      return serverMessage(dA);
    }
    if (dA[0] === 'u') {
      return userConnection(dA);
    }
    if (dA[0] === 'x') {
      return removePencil(dA[1]);
    }
    return drawSData(dA);
  };

  Connection.prototype.Send = function(msg) {
    return this.wss.send(msg);
  };

  Connection.prototype.sendDraw = function(x2, y2) {
    var msg;
    msg = "";
    msg += getId() + ":" + x2 + ":" + y2;
    return this.Send(msg);
  };

  Connection.prototype.sendPencil = function(uS, uC) {
    return this.Send("b:" + getId() + ":" + uS + ":" + uC);
  };

  Connection.prototype.sendPickup = function() {
    return this.Send("p:" + getId());
  };

  Connection.prototype.sendPutdown = function() {
    return this.Send("d:" + getId());
  };

  Connection.prototype.sendMessage = function(auth, message) {
    var msg;
    msg = "";
    msg += "m:" + auth.replace('`', ':') + ":" + message.replace('`', ':');
    return this.Send(msg);
  };

  return Connection;

})();

Toolbar = (function() {
  function Toolbar(game1) {
    var color, lum, size;
    this.game = game1;
    color = $("#color").get(0);
    size = $("#size").get(0);
    lum = $("#lum").get(0);
    this.colorInput = new InputSlider(color);
    this.sizeInput = new InputSlider(size);
    this.lumInput = new InputSlider(lum);
  }

  Toolbar.prototype.changeSize = function(s) {
    this.game.uSize = s;
    return this.game.pencilOutOfDate = true;
  };

  Toolbar.prototype.updateLumInput = function() {
    var c, strc;
    c = this.hslToRgb(tools.colorInput.getValue() / 100, 1, .5);
    strc = "rgb(" + Math.floor(c[0]) + "," + Math.floor(c[1]) + "," + Math.floor(c[2]) + ")";
    return $("#lum").attr('style', 'background-color: ' + strc + ';');
  };

  Toolbar.prototype.changeColor = function(h, s, b) {
    var c, strc;
    c = this.hslToRgb(h, s, b);
    strc = "rgb(" + Math.floor(c[0]) + "," + Math.floor(c[1]) + "," + Math.floor(c[2]) + ")";
    console.log(strc);
    this.game.uColor = strc;
    return this.game.pencilOutOfDate = true;
  };

  Toolbar.prototype.hue2rgb = function(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
      return q;
    }
    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
  };

  Toolbar.prototype.hslToRgb = function(h, s, l) {
    var b, g, p, q, r;
    if (s === 0) {
      r = g = b = l;
    } else {
      q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      p = 2 * l - q;
      r = this.hue2rgb(p, q, h + 1 / 3);
      g = this.hue2rgb(p, q, h);
      b = this.hue2rgb(p, q, h - 1 / 3);
    }
    return [r * 255, g * 255, b * 255];
  };

  return Toolbar;

})();

InputSlider = (function() {
  InputSlider.prototype.viewWidth = 220;

  InputSlider.prototype.viewHeight = 15;

  InputSlider.prototype.positionX = 0;

  InputSlider.prototype.valueByWidth = 110;

  InputSlider.prototype.choosing = false;

  InputSlider.prototype.outOfDate = false;

  InputSlider.prototype.offsetsLeft = function(object, offset) {
    if (!object) {
      return offset;
    }
    offset += object.offsetLeft;
    return this.offsetsLeft(object.offsetParent, offset);
  };

  function InputSlider(canvas1) {
    this.canvas = canvas1;
    console.log(this.canvas);
    this.position();
    this.ctx = this.canvas.getContext("2d");
    this.ctx.fillStyle = "#000";
    this.canvas.addEventListener('mouseup', (function(_this) {
      return function() {
        return _this.choosing = false;
      };
    })(this));
    this.canvas.addEventListener('mousedown', (function(_this) {
      return function() {
        _this.position();
        return _this.choosing = true;
      };
    })(this));
    this.canvas.addEventListener('mouseout', (function(_this) {
      return function() {
        return _this.choosing = false;
      };
    })(this));
    this.canvas.addEventListener('mousemove', (function(_this) {
      return function(e) {
        if (!_this.choosing) {
          return;
        }
        _this.valueByWidth = e.clientX - _this.positionX;
        return _this.drawSlide();
      };
    })(this));
  }

  InputSlider.prototype.drawSlide = function() {
    console.log(this.canvas.width + "  " + this.valueByWidth);
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    return this.ctx.fillRect(this.valueByWidth - 1, 0, 2, this.canvas.height);
  };

  InputSlider.prototype.getValue = function() {
    return Math.floor(this.valueByWidth / 220 * 100);
  };

  InputSlider.prototype.position = function() {
    console.log("offset: " + this.offsetsLeft(this.canvas, 0));
    if (this.canvas && !isNaN(this.canvas.offsetLeft)) {
      return this.positionX = this.offsetsLeft(this.canvas, 0) - window.scrollX;
    }
  };

  return InputSlider;

})();
